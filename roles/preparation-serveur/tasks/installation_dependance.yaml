---
- name: Mise à jour de l'OS
  dnf:
    name: "*"
    state: latest

- name: Installation de curl
  dnf:
    name: 'curl'
    state: latest

# tasks for ansible-disable-selinux
# - name: Install libselinux comme pre-requis pour le module SELinux Ansible
#   dnf:
#     name: "{{item}}"
#     state: latest
#   with_items:
#     - libselinux-python
#     - libsemanage-python

- name: Désactivé SELinux au prochain redemarrage
  selinux:
    state: disabled

- name: Set SELinux in permissive mode until the machine is rebooted
  command: setenforce 0
  ignore_errors: true
  changed_when: false

- name: activé transparent masquerading 
  modprobe:
    name: br_netfilter
    state: present

- name: activé IP masquerade at the firewall.
  firewalld:
    masquerade: 'True'
    state: enabled
    permanent: yes

- name: rechargement du service firewalld
  systemd:
    name: firewalld
    state: reloaded

# - name: install kubernetes yum repository
#   yum_repository:
#     name: kubernetes
#     description: kubernetes
#     baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
#     gpgcheck: true
#     enablerepo: install
#     gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
#     exclude:
#       - kubelet
#       - kubeadm
#       - kubectl
#   become: true

- name: Execute cat 
  shell: | 
      cat > /etc/yum.repos.d/kubernetes.repo << EOF
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      exclude=kubelet kubeadm kubectl
      EOF


# [kubernetes]
# name=Kubernetes
# baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
# enabled=1
# gpgcheck=1
# repo_gpgcheck=1
# gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
# exclude=kubelet kubeadm kubectl

- name: Mise à jour
  dnf:
    name: "*"
    state: latest

# - name: Installation de kubeadm kubectl kubelet
#   dnf:
#     name: 
#       - "kubeadm"
#       - "kubectl"
#       - "kubelet"
#     state: latest
#     disable_excludes: kubernetes

- name: Installation de kubernetes
  dnf:
    name: "{{ item }}"
    state: present
    disable_excludes: kubernetes
  with_items: "{{ kubernetes_packages }}"

- name: active le service kubelet au démarrage
  systemd:
    name: kubelet
    state: started
    enabled: yes

- name: réinitialisation du composant Kubernetes
  shell: "kubeadm reset --force"
  register: reset_cluster

- name: Initialisation du cluster Kubernetes
  when: reset_cluster is succeeded
  shell: |
    kubeadm init 
  register: init_cluster

- name: initialisation du cluster
  shell: kubeadm config images pull
  when: role=='master'

- name: ouverture des ports nécessaire à kubernetes
  firewalld:
    port: "{{ item.port }}/tcp"
    permanent: "{{ item.permanent }}"
    zone: public
    state: enabled
  with_items:
    - { port: '6443', permanent: true }
    - { port: '2379', permanent: true }
    - { port: '2380', permanent: true }
    - { port: '10250', permanent: true }
    - { port: '10251', permanent: true }
    - { port: '10252', permanent: true }
  when: role=='master'

# - name: Permettre à docker acceder depuis les autres nodes, remplacer the worker-IP-address par la votre.
#   firewalld:
#     rich_rule: rule family=ipv4
#     zone: public
#     source: "{{ item.adresse }}/32"
#     permanent: "{{ item.permanent }}"
#     state: enabled
#   with_items:
#     - {adresse: '192.168.12.102', permanent: true}
#     - {adresse: '192.168.12.103', permanent: true}

- name: Permettre à docker acceder depuis les autres nodes, remplacer the worker-IP-address par la votre.
  command: firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" source address="{{ item }}/32" accept'
  #command: firewall-cmd --zone=public --permanent --add-rich-rule 'rule family=ipv4 source address=worker-IP-address/32 accept'
  with_items:
    - 192.168.12.102
    - 192.168.12.103
  when: role=='master'

- name: Allow access to the host’s localhost from the docker container.
  command: firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" source address="172.17.0.0/16" accept'
  when: role=='master'

- name: Reload de firewalld
  service: 
    name: firewalld 
    state: restarted
  when: role=='master'

- name: Installation de CNI
  shell: |
    kubeadm init --pod-network-cidr 192.168.0.0/16
  when: role=='master'
 
